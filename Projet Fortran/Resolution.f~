      SUBROUTINE RESOLUTION(N,M,SIZEMAX,VECTEUR_MIN,VECTEUR_DIAGONAL,
     L VECTEUR_CHOLESKY,VECTEUR_SECONDMEMBRE,VECTEUR_U)
      IMPLICIT NONE

      INTEGER  I,IDEC,J,K,N,M,SIZEMAX,POSITIONVECT,POSITIONVECT1,
     L POSITIONVECT2,POSITIONVECT3,K1,VECTEUR_MIN((N+1)*(M+1)),
     L VECTEUR_DIAGONAL((N+1)*(M+1))

      REAL VECTEUR_STOCKAGE(SIZEMAX),VECTEUR_CHOLESKY(SIZEMAX),
     L  VECTEUR_Y((N+1)*(M+1)),VECTEUR_U((N+1)*(M+1)),
     L  VECTEUR_SECONDMEMBRE((N+1)*(M+1)),SUMF,SUMB

      SUMF = 0
      SUMB = 0
 
      DO 1 I=1,(N+1)*(M+1)
      SUMF = VECTEUR_SECONDMEMBRE(I)
      SUMB = 0.

           DO 2 K=VECTEUR_MIN(I),I-1
           POSITIONVECT = VECTEUR_DIAGONAL(I)-I+K
           SUMB = SUMB+VECTEUR_CHOLESKY(POSITIONVECT)*VECTEUR_Y(K)
2          CONTINUE 

      POSITIONVECT1 = VECTEUR_DIAGONAL(I)
      VECTEUR_Y(I) = (SUMF-SUMB)*(1./VECTEUR_CHOLESKY(POSITIONVECT1)) 
1     CONTINUE

      IDEC = (N+1)*(M+1)
      DO 3 I=1,(N+1)*(M+1)

      POSITIONVECT2 = VECTEUR_DIAGONAL(IDEC)
      WRITE(*,*) 'BII',VECTEUR_CHOLESKY(POSITIONVECT2) 
      VECTEUR_U(IDEC) = VECTEUR_Y(IDEC)/
     L (VECTEUR_CHOLESKY(POSITIONVECT2))

            DO 4 J = VECTEUR_MIN(IDEC),IDEC-1
            POSITIONVECT3 = VECTEUR_DIAGONAL(IDEC)-IDEC+J
            VECTEUR_Y(J) = VECTEUR_Y(J) - 
     L      VECTEUR_CHOLESKY(POSITIONVECT3)*VECTEUR_U(IDEC)
4           CONTINUE
            
      IDEC = IDEC -1
3     CONTINUE 

      END
